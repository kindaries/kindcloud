<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--POM模型版本-->
    <modelVersion>4.0.0</modelVersion>

    <!--项目包名,项目名,版本号,项目的打包类型(父级pom,子级jar(默认),war)-->
    <groupId>top.aries.kind</groupId>
    <artifactId>kindcloud-parent</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>

    <!--下面三个为Maven产生的文档用-->
    <name>kindcloud parent</name><!--artifactId用来区分同一个groupId下的子项目,name只是个名称-->
    <url>http://www.baidu.com/</url><!--项目主页的URL-->
    <description>kind云-工程管理父工程</description>

    <!--父项目的坐标-->
    <parent>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-parent</artifactId>
        <version>Dalston.SR2</version>
        <relativePath/>
    </parent>

    <!--一些大部分模块公用的jar包-->
    <dependencies>

        <!--spring-cloud相关的，只需要引入这一个就行-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka-server</artifactId>
        </dependency>

        <!--json序列化工具-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.41</version>
        </dependency>
    </dependencies>

    <!--描述了这个项目构建环境中的前提条件。-->
    <prerequisites>
        <maven/><!--构建该项目或使用该插件所需要的Maven的最低版本-->
    </prerequisites>

    <!--全局变量-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring.cloud.version>Dalston.SR2</spring.cloud.version>
        <fastjson.version>1.2.17</fastjson.version>
        <druid.version>1.0.25</druid.version>
        <jdbc.driverClassName>com.mysql.jdbc.Driver</jdbc.driverClassName>
        <jdbc.url>jdbc:mysql://127.0.0.1:3306/stock</jdbc.url>
        <jdbc.username>root</jdbc.username>
        <jdbc.password>root</jdbc.password>
        <jdbc.validationQuery>SELECT 1 + 1</jdbc.validationQuery>
    </properties>

    <!--设定主仓库,按顺序进行查找.-->
    <repositories>
        <repository>
            <id>alimaven</id>
            <name>aliyun maven</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
        </repository>
    </repositories>

    <!--负责管理构件的发布-->
    <distributionManagement>
        <!--release发布仓库,用来保存稳定的发行版本-->
        <repository>
            <id>maven-releases</id>
            <name>releases maven</name>
            <url>http://127.0.0.1:8080/repository/maven-releases/</url>
        </repository>
        <!--snapshot快照仓库,用于保存开发过程中的不稳定版本-->
        <snapshotRepository>
            <id>maven-snapshots</id>
            <name>snapshots maven</name>
            <url>http://127.0.0.1:8080/repository/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <!--子项目,在build父级项目时,会根据子模块的相互依赖关系整理一个build顺序,然后依次build-->
    <modules>
        <module>kindcloud-eureka</module>
        <module>kindcloud-zuul</module>
        <module>kindcloud-sys</module>
        <module>kindcloud-tasks</module>
        <module>kindcloud-socket</module>
        <module>kindcloud-server</module>
        <module>kindcloud-client</module>
    </modules>

    <!--全局配置-->
    <build>
        <!--项目源码目录-->
        <sourceDirectory>src/main/java</sourceDirectory>
        <!--脚本源码目录,无需编译-->
        <scriptSourceDirectory>src/main/resources</scriptSourceDirectory>
        <!--所有资源路径列表-->
        <resources>
            <!--配置过滤规则-->
            <resource>
                <directory>src/main/java</directory>
                <!--需要过滤的文件-->
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <!--是否使用参数值代替参数名-->
                <filtering>false</filtering><!--filtering为false的时候,会把不需要过滤的文件打到classpath下-->
            </resource>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
        <!--单元测试源码目录-->
        <testSourceDirectory>src/test/java</testSourceDirectory>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <!--不需要过滤的文件-->
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
                <filtering>true</filtering><!--filtering为true的时候,这时只会把过滤的文件打到classpath下-->
            </testResource>
        </testResources>
        <!--使用的插件列表-->
        <plugins>
            <!--指定项目源码的jdk版本,编码格式的插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source><!--源代码使用的JDK版本-->
                    <target>1.8</target><!--需要生成的目标class文件的编译版本-->
                    <encoding>UTF-8</encoding><!--字符集编码-->
                    <!--这个选项用来传递编译器自身不包含但是却支持的参数选项-->
                    <compilerArguments>
                        <verbose/>
                        <bootclasspath>${java.home}/lib/rt.jar;${java.home}/lib/jce.jar</bootclasspath>
                    </compilerArguments>
                </configuration>
            </plugin>
            <!--自动将源码打包并发布的插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <configuration>
                    <attach>true</attach>
                </configuration>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--执行测试用例的插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>